#!/usr/bin/python3
"""A simple TLS reverse proxy for use with Prometheus exporters."""

from argparse import ArgumentParser
from configparser import ConfigParser
from functools import partial
import http.server
import shutil
import ssl
import sys
import urllib.error
import urllib.request


class ProxyHTTPRequestHandler(http.server.BaseHTTPRequestHandler):
    """A handler to proxy HTTP requests."""

    def __init__(self, conf, *args, **kwargs):
        self.conf = conf
        super().__init__(*args, **kwargs)

    def do_HEAD(self):  # pylint:disable=invalid-name
        """Method called for http HEAD requests"""
        self.do_GET(body=False)

    def do_GET(self, body=True):  # pylint:disable=invalid-name
        """Method called for http GET requests"""

        if self.conf.get("ssl_verify"):
            clients = set(self.conf.get("ssl_clients", '').split())
            if clients:
                alt_names = {x[1] for x in self.connection.getpeercert()['subjectAltName']}
                if not clients & alt_names:
                    self.send_error(403, "Forbidden")
                    return
        try:
            resp = urllib.request.urlopen(f"{self.conf['server_url']}{self.path}")
        except urllib.error.HTTPError as err:
            self.send_error(err.code, err.reason)
            return
        except urllib.error.URLError as err:
            self.send_error(500, "Proxy server error")
            return

        self.send_response(resp.code)
        for header, val in resp.headers.items():
            if header.lower() != 'transfer-encoding':
                self.send_header(header, val)
        self.end_headers()
        if body:
            shutil.copyfileobj(resp, self.wfile)


def serve(conf):
    """Launch an httpd listener."""
    print(f"Listening on {conf['proxy_address']}:{int(conf['proxy_port'])}.", file=sys.stderr)
    print(f"Proxying to {conf['server_url']}.", file=sys.stderr)
    handler = partial(ProxyHTTPRequestHandler, conf)
    httpd = http.server.HTTPServer((conf["proxy_address"], int(conf["proxy_port"])), handler)
    if conf.get("ssl_cert"):
        print("SSL enabled.", file=sys.stderr)
        context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
        context.load_cert_chain(certfile=conf.get("ssl_cert"), keyfile=conf.get("ssl_key"))
        if conf.get("ssl_verify"):
            print("SSL client verification enabled.", file=sys.stderr)
            if conf.get("ssl_clients"):
                print(f"SSL allowed clients: {conf.get('ssl_clients')}", file=sys.stderr)
            context.verify_mode = ssl.CERT_REQUIRED
            context.load_default_certs()
        with context.wrap_socket(httpd.socket, server_side=True) as sock:
            httpd.socket = sock
            httpd.serve_forever()
    else:
        httpd.serve_forever()


def get_config():
    """Locate and read the config file."""
    parser = ArgumentParser(description="Command-line options")
    parser.add_argument("-c", "--config", default="/etc/prometheus/exporter_proxy.ini",
                        help="Path to config file. (Defaults to: %(default)s)")
    args = parser.parse_args()
    conf = ConfigParser()

    with open(args.config) as conf_f:
        conf.read_file(conf_f)
    return conf


def main():
    """Launch a process for each config section."""
    config = get_config()

    serve(dict(config.items('exporter_proxy')))


if __name__ == "__main__":
    main()
